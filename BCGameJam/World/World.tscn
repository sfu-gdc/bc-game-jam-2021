[gd_scene load_steps=10 format=2]

[ext_resource path="res://World/Camera2D.gd" type="Script" id=1]
[ext_resource path="res://World/Line2D.gd" type="Script" id=2]
[ext_resource path="res://WaveInformation/WaveInformation.tscn" type="PackedScene" id=3]
[ext_resource path="res://Assets/Portal.png" type="Texture" id=4]
[ext_resource path="res://World/Portal.gd" type="Script" id=5]

[sub_resource type="Shader" id=1]
code = "shader_type canvas_item;
render_mode unshaded;

const float MIN_STAR_COL = 0.9;

// One iteration of one at a time hashing
uint hash(uint x) 
{
    x = x + (x << uint(10));
    x = x ^ (x >>  uint(6));
    x = x + (x <<  uint(3));
    x = x ^ (x >> uint(11));
    x = x = (x << uint(15));
    return x;
}
// A hash for vector3
uint hash2(uvec2 v) 
{ 
	return hash(v.x ^ hash(v.y)); 
}
// A hash for vector3
uint hash3(uvec3 v) 
{ 
	return hash(v.x ^ hash(v.y) ^ hash(v.z)); 
}
// Builds a float from a uint
float floatConstruct(uint m) {
    const uint ieeeMantissa = uint(0x007FFFFF); //  binary32 mantissa bitmask
    const uint ieeeOne = uint(0x3F800000); //  1.0 in IEEE binary32

    m &= ieeeMantissa;                     //  Keep only mantissa bits (fractional part)
    m |= ieeeOne;                          //  Add fractional part to 1.0

    float  f = uintBitsToFloat(m);         //  Range [1:2]
    return f - 1.0;                        //  Range [0:1]
}
// Returns a random float
float rand(float seed) {
// 	return texture(randTexture, fract(vec2(seed) / 300.0)).r;
	return floatConstruct(hash(floatBitsToUint(seed)));
}
// Using the hash, converts a vec2 to a uvec2, hashes it, the returns a float
float rand2(vec2 v) 
{ 
// 	return texture(randTexture, fract(v / 300.0)).r;
	return floatConstruct(hash2(floatBitsToUint(v))); 
}
// Returns the colour added to a pixel by a star
vec3 star(vec2 pointPosition, vec2 starPosition, float size, vec3 colour) {
	// Calculate light intensity
	float returnColourMultiplier = clamp(1.0 * pow(distance(pointPosition, starPosition) / size, -2.0), 0.0, 1.0);
	// Return the colour damped by the light intensity
	return returnColourMultiplier * colour;
}
// Create a random field of uniformely moving stars
vec3 starField(vec2 pixelCoord, vec2 resolution, float time, float gridSize, vec2 velocity, float avgSize, vec3 modulate) {
	// Set up some values to find star and pixel positions
	vec2 grid = resolution / gridSize;
	vec2 pixelSquare = floor(((-time * velocity) + pixelCoord) / gridSize);
	
	// Initialize colour to be returned
	vec3 pixelColour = vec3(0.0);
	
	// For the nearest nine stars to the pixel
	for (float starSquareX = pixelSquare.x - 1.0; starSquareX <= pixelSquare.x + 1.0; starSquareX++) {
		for (float starSquareY = pixelSquare.y - 1.0; starSquareY <= pixelSquare.y + 1.0; starSquareY++) {
			// Find two random numbers for the randomization
			float randNum1 = rand2(vec2(starSquareX, starSquareY));
			float randNum2 = rand2(vec2(starSquareY, starSquareX));
			// Set the different randomizers
			vec2 offset = vec2(randNum1 - 1.0, randNum2 - 1.0);
			float sizeRand = randNum1 + 0.5;
			float redRand = (MIN_STAR_COL * randNum2) + MIN_STAR_COL;
			float greenRand = (MIN_STAR_COL * fract(randNum1 * 15.678)) + MIN_STAR_COL;
			float blueRand = (MIN_STAR_COL * fract(randNum2 * 17.765)) + MIN_STAR_COL;
			// Add the light from the given random star to the pixel
			pixelColour += star(pixelCoord, (gridSize * (vec2(starSquareX + 0.5, starSquareY + 0.5) + offset)) + (time * velocity), avgSize * sizeRand, modulate * vec3(redRand, greenRand, blueRand));
		}
	}
	// Return the pixel's colour
	return pixelColour;
}
// Using the hash, converts a vec3 to a uvec3, hashes it, the returns a float
float rand3(vec3 v) {
// 	return texture(randTexture, fract(vec2(v.x + fract(v.z * 10.0), v.y + fract(v.z + 10.0)) / 300.0)).r;
	return floatConstruct(hash3(floatBitsToUint(v))); 
}

float perlinNoise(vec3 vector) 
{
	vec3 square = floor(vector);
	vec3 pos = fract(vector);
	
	vec3 pt1 = vec3(rand3(square) * 2.0 - 1.0, rand3(square + vec3(0.1)) * 2.0 - 1.0, rand3(square - vec3(0.1)) * 2.0 - 1.0);
	vec3 pt2 = vec3(rand3(square + vec3(1.0, 0.0, 0.0)) * 2.0 - 1.0, rand3(square + vec3(1.0, 0.0, 0.0) + vec3(0.1)) * 2.0 - 1.0, rand3(square + vec3(1.0, 0.0, 0.0) - vec3(0.1)) * 2.0 - 1.0);
	vec3 pt3 = vec3(rand3(square + vec3(0.0, 1.0, 0.0)) * 2.0 - 1.0, rand3(square + vec3(0.0, 1.0, 0.0) + vec3(0.1)) * 2.0 - 1.0, rand3(square + vec3(0.0, 1.0, 0.0) - vec3(0.1)) * 2.0 - 1.0);
	vec3 pt4 = vec3(rand3(square + vec3(1.0, 1.0, 0.0)) * 2.0 - 1.0, rand3(square + vec3(1.0, 1.0, 0.0) + vec3(0.1)) * 2.0 - 1.0, rand3(square + vec3(1.0, 1.0, 0.0) - vec3(0.1)) * 2.0 - 1.0);
	vec3 pt5 = vec3(rand3(square + vec3(0.0, 0.0, 1.0)) * 2.0 - 1.0, rand3(square + vec3(0.0, 0.0, 1.0) + vec3(0.1)) * 2.0 - 1.0, rand3(square + vec3(0.0, 0.0, 1.0) - vec3(0.1)) * 2.0 - 1.0);
	vec3 pt6 = vec3(rand3(square + vec3(1.0, 0.0, 1.0)) * 2.0 - 1.0, rand3(square + vec3(1.0, 0.0, 1.0) + vec3(0.1)) * 2.0 - 1.0, rand3(square + vec3(1.0, 0.0, 1.0) - vec3(0.1)) * 2.0 - 1.0);
	vec3 pt7 = vec3(rand3(square + vec3(0.0, 1.0, 1.0)) * 2.0 - 1.0, rand3(square + vec3(0.0, 1.0, 1.0) + vec3(0.1)) * 2.0 - 1.0, rand3(square + vec3(0.0, 1.0, 1.0) - vec3(0.1)) * 2.0 - 1.0);
	vec3 pt8 = vec3(rand3(square + vec3(1.0, 1.0, 1.0)) * 2.0 - 1.0, rand3(square + vec3(1.0, 1.0, 1.0) + vec3(0.1)) * 2.0 - 1.0, rand3(square + vec3(1.0, 1.0, 1.0) - vec3(0.1)) * 2.0 - 1.0);
	
	return 	0.5 + 0.5 * (
				mix(
					mix(
						mix(dot(pt1, pos - vec3(0.0, 0.0, 0.0)), dot(pt2, pos - vec3(1.0, 0.0, 0.0)), smoothstep(0.0, 1.0, pos.x)), 
						mix(dot(pt3, pos - vec3(0.0, 1.0, 0.0)), dot(pt4, pos - vec3(1.0, 1.0, 0.0)), smoothstep(0.0, 1.0, pos.x)), 
						smoothstep(0.0, 1.0, pos.y)
					), 
					mix(
						mix(dot(pt5, pos - vec3(0.0, 0.0, 1.0)), dot(pt6, pos - vec3(1.0, 0.0, 1.0)), smoothstep(0.0, 1.0, pos.x)), 
						mix(dot(pt7, pos - vec3(0.0, 1.0, 1.0)), dot(pt8, pos - vec3(1.0, 1.0, 1.0)), smoothstep(0.0, 1.0, pos.x)), 
						smoothstep(0.0, 1.0, pos.y)
					), 
					smoothstep(0.0, 1.0, pos.z)
				)
			);
}
float fbm(vec3 vector) 
{
	const int OCTAVES = 6;
	const float LACUNARITY = 1.8;
	const float GAIN = 0.5;
	
	float value = 0.0;
	float amplitude = GAIN;
	float normalizer = 0.0;
	
	for (int index = 0; index < OCTAVES; index ++)
	{
		normalizer += amplitude;
		value += amplitude * perlinNoise(vector);
		vector *= LACUNARITY;
		amplitude *= GAIN;
	}
	
	return value / normalizer;
}


void fragment() {
	vec4 initial_colour = texture(TEXTURE, UV);
	// Only run the rest if the pixel has opacity
	if (length(initial_colour) >= 1.5) {
		// Find the number of pixels along the screen
		vec2 resolution = 1.0 / SCREEN_PIXEL_SIZE;
		// Initialize the pixel colour
		vec3 colour = vec3(0.0);

		// Add background nebula
		float nebula = fbm(vec3(0.02 * FRAGCOORD.xy, 0.5 * TIME));
		colour += pow(1.8 * vec3(nebula, 0.5 * nebula, nebula), vec3(4.0));

		// Add star fields to the colour
		colour += starField(FRAGCOORD.xy, resolution, TIME + 20.0, 150.0, vec2(20.0), 2.0, vec3(1.0, 1.0, 2.0));
		colour += starField(FRAGCOORD.xy, resolution, TIME + 20.0, 100.0, vec2(-5.0, 10.0), 1.5, vec3(1.0, 1.0, 1.5));
		colour += starField(FRAGCOORD.xy, resolution, TIME + 20.0, 75.0, vec2(1.0, -6.0), 1.0, vec3(1.0));
		colour += starField(FRAGCOORD.xy, resolution, TIME + 20.0, 75.0, vec2(4.0, -0.5), 0.75, vec3(1.5, 1.0, 1.0));
		colour += starField(FRAGCOORD.xy, resolution, TIME + 20.0, 75.0, vec2(-1.0, 3.0), 0.5, vec3(2.0, 1.0, 1.0));
		// Assign the colour to the screen
		COLOR = clamp(vec4(colour, initial_colour.a), 0.0, 1.0);
	}
	else {
		COLOR = vec4(0.0);
	}
}"

[sub_resource type="ShaderMaterial" id=2]
shader = SubResource( 1 )

[sub_resource type="Gradient" id=3]
colors = PoolColorArray( 0.121569, 0.435294, 0.121569, 1, 0.121569, 0.435294, 0.121569, 1 )

[sub_resource type="GradientTexture" id=4]
gradient = SubResource( 3 )
width = 1

[node name="World" type="Node2D"]

[node name="Camera2D" type="Camera2D" parent="."]
scale = Vector2( 0.05, 0.05 )
current = true
script = ExtResource( 1 )

[node name="Path" type="Line2D" parent="."]
z_index = -1
default_color = Color( 0.784314, 0.588235, 0.392157, 1 )
begin_cap_mode = 2
script = ExtResource( 2 )

[node name="CanvasLayer" type="CanvasLayer" parent="."]

[node name="Portal" type="Sprite" parent="CanvasLayer"]
material = SubResource( 2 )
position = Vector2( 512, 300 )
scale = Vector2( 0.3, 0.3 )
texture = ExtResource( 4 )
script = ExtResource( 5 )

[node name="WaveInformation" parent="CanvasLayer" instance=ExtResource( 3 )]

[node name="Background" type="Sprite" parent="."]
position = Vector2( 512, 300 )
scale = Vector2( 1024, 600 )
z_index = -2
texture = SubResource( 4 )
